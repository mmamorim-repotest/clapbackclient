{"mappings":"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","sources":["src/index.ts","src/clapback/clapback.ts","src/clapback/entity.ts","src/clapback/schema.ts","src/clapback/model.ts"],"sourcesContent":["import Clapback from \"./clapback/clapback\"\n\nexport { Clapback } ","\nimport axios from \"axios\"\nimport Entity from \"./entity\"\n\nexport default class Clapback {\n    public static host: string\n    private entities: any = {}\n    public ready: Promise<any>\n\n    constructor(host: string) {\n        Clapback.host = host\n        let self = this\n        this.ready = new Promise((_resolve, _reject) => {\n            self.getEntities().then((data) => {\n                _resolve(data)\n            }).catch((e) => {\n                console.log(\"error getEntities \",e.code);            \n            })\n        })\n    }\n\n    async getEntities() {\n        let response = await axios({\n            method: 'get',\n            url: Clapback.host + '/entities',\n            data: {}\n        })\n        this.entities = {}\n        for(let key in response.data) {\n            this.entities[key] = new Entity(response.data[key].name)\n            this.entities[key].setSchema(response.data[key].schema)\n        }\n        return response.data\n    }\n\n    entity(entityName: string): Entity {\n        if(entityName == undefined) { throw new Error(\"Entity name required!\")}\n        if(this.entities[entityName] == undefined) {\n            throw new Error(\"Entity name not found!\")\n        }\n        return this.entities[entityName]\n    }\n\n}","import Schema from \"./schema\"\nimport Model from \"./model\"\nimport { io } from \"socket.io-client\"\nimport axios from \"axios\"\nimport Clapback from \"./clapback\"\n\n  export default class Entity {\n    private entityName: string\n    private schema: Schema | any = null\n    private objSchema: any = {}\n    private _model: Model | any = null\n    private socket: any = null\n\n    constructor(entityName: string) {\n        this.entityName = entityName\n        this._model = new Model(entityName)\n        this.socket = io(Clapback.host)\n    }\n\n    getEntityName() {\n        return this.entityName\n    }\n\n    getSchema() {\n        return this.objSchema\n    }\n\n    setSchema(objSchema: any) {\n        this.objSchema = objSchema\n        this.schema = new Schema(objSchema)\n        this._model.setSchema(this.schema)\n    }\n\n    validate(data: any) {\n        return this.schema.validate(data)\n    }\n\n    model(): Model {\n        return this._model\n    }\n\n    listen(cbfunc: Function) {\n        //this.socket.emit('chat message', \"oi server\");\n        this.socket.on('changeEntity-'+this.entityName, (msg: any) => {\n            //console.log('changeEvent', msg);\n            cbfunc(msg)\n        });\n    }\n\n    listenID(id: string, cbfunc: Function) {\n        //this.socket.emit('chat message', \"oi server\");\n        let routeName = this.entityName.toLowerCase()\n        //console.log(\"GET request: \"+Clapback.host + '/entities/' + routeName)\n        axios({\n            method: 'post',\n            url: Clapback.host + '/entities/' + routeName + \"/listenid\",\n            data: { id }\n        }).then((res) => {\n            console.log(\"listenID added\",res);\n        }).catch((e) => {\n            console.log(e);            \n        })\n\n        let msg = 'changeEntity-'+this.entityName+'ID:'+id\n        this.socket.on(msg, (msg: any) => {\n            //console.log('changeEvent', msg);\n            cbfunc(msg)\n        });\n    }\n\n}","import Ajv from \"ajv\"\n\nexport default class Schema {\n    private ajv: Ajv\n    private validator: any\n    private objSchema: any\n\n    constructor(objSchema: any) {\n        this.objSchema = objSchema\n        this.ajv = new Ajv()\n        this.validator = this.ajv.compile(objSchema)\n    }\n\n    getTypeDescription() {\n        let typeDesc: any = {}\n        for(let key in this.objSchema.properties) {\n            typeDesc[key] = this.objSchema.properties[key].type\n        }\n        return typeDesc\n    }\n\n    validate(data: any) {\n        this.validator(data)\n        return this.validator.errors\n    }\n}","import Schema from './schema';\nimport axios from \"axios\"\nimport Clapback from './clapback';\n\nexport default class Model {\n    private entityName: string\n    private schema: Schema | any = null\n\n    constructor(entityName: string) {\n        this.entityName = entityName\n    }\n\n    setSchema(schema: Schema) {\n        this.schema = schema\n    }\n\n    async set(data: any) {\n        let routeName = this.entityName.toLowerCase()\n        let path = Clapback.host + '/entities/' + routeName\n        if (this.schema) {\n            let error = this.schema.validate(data)\n            if (error) {\n                console.log(`VALIDATE ERROR on setting [${this.entityName}]`);\n                throw error\n            }\n        }\n        const res = await axios.put(path, data);\n        return res.data\n    }\n\n    async getAll() {\n        let routeName = this.entityName.toLowerCase()\n        //console.log(\"GET request: \"+Clapback.host + '/entities/' + routeName)\n        let response = await axios({\n            method: 'get',\n            url: Clapback.host + '/entities/' + routeName,\n            data: {}\n        })\n        //console.log(\"response.data\",response.data);\n        return response.data\n    }\n\n    async getId(id: string) {\n        let routeName = this.entityName.toLowerCase()\n        //console.log(\"GET request: \"+Clapback.host + '/entities/' + routeName)\n        try {\n            let response = await axios({\n                method: 'get',\n                url: Clapback.host + '/entities/' + routeName + \"/\" + id,\n                data: {}\n            })\n            //console.log(\"response.data\",response.data);\n            return response.data\n        } catch (e) {\n            return { error: \"Entity name required!\" }\n        }\n    }\n\n    private createClone(obj: any) {\n        let self = this\n        let clone = JSON.parse(JSON.stringify(obj))\n        let save = async function () {\n            let dataSafe = JSON.parse(JSON.stringify(clone))\n            //console.log(\"chamei save com dataSafe\", dataSafe);\n            await self.set(dataSafe)\n        }\n        clone.save = save\n        return clone\n    }\n\n    get(id: string, cbfunc: Function) {\n        let self = this\n        this.getId(id).then((data) => {\n            let dataSafe = self.createClone(data)\n            cbfunc(dataSafe);\n        })\n    }\n}"],"names":[],"version":3,"file":"module.js.map"}